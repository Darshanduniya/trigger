from datetime import datetime
from airflow import DAG
from airflow.operators.dummy_operator import DummyOperator
from airflow.operators.python_operator import PythonOperator

# Define a function to fail intentionally
def fail_task():
    raise ValueError("Task failed intentionally")

# Define default arguments for the DAG
default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024, 4, 4),
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 1,
}

# Define the DAG
dag = DAG(
    'example_dag',
    default_args=default_args,
    description='A simple DAG with 5 tasks',
    schedule_interval='@once',
)

# Define tasks
start_task = DummyOperator(task_id='start_task', dag=dag)

task1 = DummyOperator(task_id='task1', dag=dag)
task2 = DummyOperator(task_id='task2', dag=dag)
task3 = DummyOperator(task_id='task3', dag=dag)

# Task 4 is intentionally set to fail
task4 = PythonOperator(
    task_id='task4',
    python_callable=fail_task,
    dag=dag,
)

task5 = DummyOperator(task_id='task5', dag=dag)

end_task = DummyOperator(task_id='end_task', dag=dag)

# Define task dependencies
start_task >> task1 >> [task2, task3] >> task4 >> task5 >> end_task
